How to compile sections of code only if a flag is enabled:
The section of code should be guarded by conditionals such as #ifdef, #if etc.

https://gcc.gnu.org/onlinedocs/gcc-3.0/cpp_4.html

Then, invoke GCC with flag -D:

https://gcc.gnu.org/onlinedocs/cpp/Invocation.html

-D name
    Predefine "name" as a macro, with definition 1.

-D name=definition
    The contents of definition are tokenized and processed, then applied to "name".

Practical example (1)

    #ifdef DEBUG_SECTION_1

    printf("This is included only for debugging purposes.\n");

    #endif

Then compile with

    gcc -D DEBUG_SECTION_1 file.c

Practical example (2)

    #if (DEBUG_LEVEL > 1)

    printf("This is included only if DEBUG_LEVEL is 2 or higher.\n");

    #endif

Then compile with

    gcc -D DEBUG_LEVEL=2 file.c

Now, check this out. By pairing the above with a function-like
macro expansion, you can create a very neat debug tool, and your code
will be shorter than the above stuff. This won't even need -g compile flag.

    #ifdef DEBUG_FLAG
    #  define DEBUGPRINT(_fmt, ...) \
        fprintf(stderr, "[file %s, line %d]: " _fmt,\
        __FILE__, __LINE__, __VA_ARGS__)
    #else
    #  define DEBUGPRINT(_fmt, ...)
    #endif

Then you call it by:

    DEBUGPRINT("x = %d", x);

A shorter print, ommitting the file name, and just printing the line.

    #ifdef DEBUG_FLAG
    #  define DEBUGPRINT(_fmt, ...) \
        fprintf(stderr, "[%d]: " _fmt, __LINE__, __VA_ARGS__)
    #else
    #  define DEBUGPRINT(_fmt, ...)
    #endif

Source:
https://en.wikipedia.org/wiki/C_preprocessor
https://stackoverflow.com/questions/38710957/how-to-write-a-c-macro-that-expands-to-a-ifdef-endif-macro-block
https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html

